package leetCode;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

public class Q2_Add_Two_Numbers {

	public static void main(String[] args) {

		LinkedList<Integer> l1 = new LinkedList<>();
		LinkedList<Integer> l2 = new LinkedList<>();

		for (int i = 1; i < 10; i++) {
			l1.add(i);
		}
		for (int i = 9; i > 0; i--) {
			l2.add(i);
		}

		// System.out.println(l1);
		System.out.println(l2);

		// reverse the linked lists
		int l1Size = l1.size(); /* get the size of the linked list */
		/* conver linked list into array so indexes can be accessed */
		List<Integer> intList = l1.stream()
                .map(Integer::valueOf)
                .collect(Collectors.toList());
		
		LinkedList<Integer> l1Reverse = new LinkedList<>();
		for (int i = 0; i < l1.size(); i++) {
			l1Reverse.add(l1Size); /*
									 * to reverse the linked list, start with the last index, add it to the reverse
									 * linkedlist and keep incrementing down until you get to the first index which
									 * will be added at the last spot
									 */
			l1Size = l1Size - 1;

		}

	}

}
